#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ Telegram.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å
–µ–≥–æ –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è.
"""

import os
import sys
import time
import subprocess
import logging
import signal
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs("logs", exist_ok=True)

# –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
log_file = f"logs/bot_{time.strftime('%Y%m%d_%H%M%S')}.log"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram
        if not os.environ.get("TELEGRAM_TOKEN"):
            logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return None
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥-—Ñ–∞–π–ª
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: python language_mirror_telebot.py > {log_file} 2>&1")
        process = subprocess.Popen(
            ["python", "language_mirror_telebot.py"],
            stdout=open(log_file, "a"),
            stderr=subprocess.STDOUT,
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º preexec_fn –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞
            preexec_fn=os.setpgrp
        )
        
        # –ó–∞–ø–∏—Å—å PID –≤ —Ñ–∞–π–ª
        with open("bot.pid", "w") as pid_file:
            pid_file.write(str(process.pid))
        
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        return process
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞
def stop_existing_bots():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ PID —Ñ–∞–π–ª—É
        if os.path.exists("bot.pid"):
            with open("bot.pid", "r") as pid_file:
                pid = int(pid_file.read().strip())
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª SIGTERM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    os.kill(pid, signal.SIGTERM)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")
                    
                    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    time.sleep(2)
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ –∂–∏–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º SIGKILL
                    try:
                        os.kill(pid, 0)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                        os.kill(pid, signal.SIGKILL)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª SIGKILL –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")
                    except OSError:
                        pass  # –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
                    
                except OSError:
                    logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª PID
            os.remove("bot.pid")
        
        # –¢–∞–∫–∂–µ –∏—â–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        # –≠—Ç–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º, –µ—Å–ª–∏ PID-—Ñ–∞–π–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        try:
            subprocess.run(
                ["pkill", "-f", "python.*language_mirror.*"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                check=False
            )
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –∏–º–µ–Ω–µ–º 'python.*language_mirror.*'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏–º–µ–Ω–∏: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞"""
    
    print("=" * 60)
    print("ü§ñ –ó–∞–ø—É—Å–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Language Mirror Bot")
    print("=" * 60)
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Ç–æ–≤
    stop_existing_bots()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_process = start_bot()
    if not bot_process:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        sys.exit(1)
    
    print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: {bot_process.pid})")
    print(f"üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª: {log_file}")
    print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...")
    print("-" * 60)
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞
    try:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
            status = bot_process.poll()
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (status –Ω–µ None)
            if status is not None:
                logger.warning(f"–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º {status}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                print(f"‚ö†Ô∏è –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º {status}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                time.sleep(5)
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
                bot_process = start_bot()
                if not bot_process:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                    sys.exit(1)
                
                print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω (PID: {bot_process.pid})")
            
            # –í—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (–¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)
            if datetime.datetime.now().minute % 10 == 0 and datetime.datetime.now().second == 0:
                print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω (PID: {bot_process.pid}). –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M:%S')}")
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            time.sleep(1)
    
    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        if bot_process:
            bot_process.terminate()
            bot_process.wait(timeout=5)
        
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if bot_process:
            bot_process.terminate()
            bot_process.wait(timeout=5)
        
        sys.exit(1)

if __name__ == "__main__":
    main()