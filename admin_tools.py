#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Language Mirror Bot.
"""

import os
import sys
import json
import requests
import random
from datetime import datetime, timedelta

# Base URL
BASE_URL = "http://localhost:5000"
API_URL = f"{BASE_URL}/api/feedback"

def print_header(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è CLI –º–µ–Ω—é"""
    print("\n" + "=" * 50)
    print(f"   {text}")
    print("=" * 50)

def print_menu():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print_header("LANGUAGE MIRROR BOT - –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´")
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
    print("2. –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    print("3. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    print("4. –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    print("5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("0. –í—ã—Ö–æ–¥")

def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–ø—Ä–æ—Å –∫ API"""
    print_header("–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ë–û–¢–ê")
    
    try:
        response = requests.get(f"{BASE_URL}/api/feedback")
        
        if response.status_code == 200:
            print("\n‚úì –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"‚úì HTTP Status: {response.status_code}")
        else:
            print("\n‚úó API –≤–µ—Ä–Ω—É–ª–æ –Ω–µ–æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥:")
            print(f"‚úó HTTP Status: {response.status_code}")
            print(f"‚úó Response: {response.text}")
    
    except requests.exceptions.ConnectionError:
        print("\n‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä.")
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def add_test_feedback():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    print_header("–î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    
    # –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sample_usernames = [
        "user1", "language_learner", "alex_student", "english_fan", 
        "maria_novice", "john_doe", "jane_smith", "learner2023"
    ]

    # –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
    ratings = ["helpful", "okay", "not_helpful"]

    # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    sample_comments = [
        "–û—Ç–ª–∏—á–Ω—ã–π –±–æ—Ç! –û—á–µ–Ω—å –ø–æ–º–æ–≥ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.",
        "–•–æ—Ä–æ—à–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏, –Ω–æ –∏–Ω–æ–≥–¥–∞ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
        "–ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Å—É–∂–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã.",
        "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.",
        "–°–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ.",
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏!",
        "–ë–æ—Ç —Ö–æ—Ä–æ—à–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –º–æ–µ–º—É —É—Ä–æ–≤–Ω—é.",
        "–•–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª.",
        "–û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑.",
        "–û—Ç–ª–∏—á–Ω–æ –ø–æ–º–æ–≥ –º–Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.",
        "",  # –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    ]
    
    try:
        count = int(input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ") or "5")
    except ValueError:
        count = 5
        print("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5")
    
    print(f"\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...")
    
    success = 0
    for i in range(count):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_id = random.randint(100000, 999999)
        username = random.choice(sample_usernames)
        rating = random.choice(ratings)
        comment = random.choice(sample_comments)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        feedback_data = {
            "user_id": user_id,
            "username": username,
            "rating": rating,
            "comment": comment
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        try:
            response = requests.post(API_URL, json=feedback_data)
            
            if response.status_code == 201:
                success += 1
                print(f"‚úì –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç–∑—ã–≤ #{i+1}: {username} - {rating}")
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ #{i+1}: {response.status_code} - {response.text}")
        
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print(f"\n–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {success} –∏–∑ {count} –æ—Ç–∑—ã–≤–æ–≤.")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def view_feedback():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    print_header("–ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–• –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò")
    
    try:
        response = requests.get(API_URL)
        
        if response.status_code == 200:
            data = response.json()
            
            if not data:
                print("\n–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            else:
                print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π:\n")
                
                for item in data:
                    rating_display = item['rating']
                    if rating_display == 'helpful':
                        rating_display = 'üëç Helpful'
                    elif rating_display == 'okay':
                        rating_display = 'ü§î Okay'
                    elif rating_display == 'not_helpful':
                        rating_display = 'üëé Not helpful'
                    
                    print(f"ID: {item.get('id', 'N/A')}")
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {item.get('username', 'unknown')} (ID: {item.get('user_id', 'unknown')})")
                    print(f"–û—Ü–µ–Ω–∫–∞: {rating_display}")
                    print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {item.get('comment', '')}")
                    print(f"–í—Ä–µ–º—è: {item.get('timestamp', 'unknown')}")
                    print("-" * 40)
        else:
            print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}")
    
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    
    telegram_token = os.environ.get("TELEGRAM_TOKEN")
    
    print("\nTELEGRAM_TOKEN:", "‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if telegram_token else "‚úó –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if not telegram_token:
        print("\n–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_TOKEN.")
        print("–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("  export TELEGRAM_TOKEN='your_telegram_bot_token'")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    while True:
        os.system('clear' if os.name != 'nt' else 'cls')
        print_menu()
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-5): ")
        
        if choice == '0':
            print("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            sys.exit(0)
        elif choice == '1':
            check_bot_status()
        elif choice == '2':
            add_test_feedback()
        elif choice == '3':
            view_feedback()
        elif choice == '4':
            print("\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        elif choice == '5':
            check_environment()
        else:
            print("\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()