#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Language Mirror Bot - A Telegram bot for interactive language learning.
This version is adapted to work with the telebot (PyTelegramBotAPI) library.
"""

import os
import sys
import time
import random
import logging
import json
import requests
import threading
from datetime import datetime
from openrouter_client import OpenRouterClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –£—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å telebot
try:
    import telebot
    from telebot import types
except ImportError:
    logger.error("telebot (PyTelegramBotAPI) library is not installed.")
    print("ERROR: telebot (PyTelegramBotAPI) library is not installed.")
    print("Please install it using: pip install pyTelegramBotAPI")
    sys.exit(1)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN environment variable is not set")
    print("ERROR: TELEGRAM_TOKEN environment variable is not set")
    print("Please set it to your Telegram bot token from BotFather")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ID)
# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_USERNAME = os.environ.get("ADMIN_USERNAME", "")
ADMIN_USER_ID = os.environ.get("ADMIN_USER_ID", "0")

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_USERS = {}
if ADMIN_USERNAME and ADMIN_USER_ID and ADMIN_USER_ID.isdigit():
    ADMIN_USERS[ADMIN_USERNAME] = int(ADMIN_USER_ID)

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
DEBUG_MODE = os.environ.get("DEBUG_MODE", "False").lower() == "true"

# –ü–æ–ª—É—á–∞–µ–º force admin ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ü—Ä–∏ –ª—é–±–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã–π ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
# –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–º–∞–Ω–¥—ã /admin_feedback
FORCE_ADMIN_ID_STR = os.environ.get("FORCE_ADMIN_ID", "0")
FORCE_ADMIN_ID = int(FORCE_ADMIN_ID_STR) if FORCE_ADMIN_ID_STR.isdigit() else 0

# –£—Ä–æ–≤–Ω–∏ –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
LANGUAGE_LEVELS = {
    "A1": "Beginner - You're just starting with English",
    "A2": "Elementary - You can use simple phrases and sentences",
    "B1": "Intermediate - You can discuss familiar topics",
    "B2": "Upper Intermediate - You can interact with fluency",
    "C1": "Advanced - You can express yourself fluently and spontaneously",
    "C2": "Proficiency - You can understand virtually everything heard or read"
}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from db_session_manager import DatabaseSessionManager
    from flask import Flask
    
    # –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
    app = Flask(__name__)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.environ.get("DATABASE_URL")
    if database_url:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if database_url.startswith("postgres://"):
            database_url = database_url.replace("postgres://", "postgresql://", 1)
        
        app.config["SQLALCHEMY_DATABASE_URI"] = database_url
        app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
            "pool_recycle": 300, 
            "pool_pre_ping": True,
        }
        app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        session_manager = DatabaseSessionManager(app)
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç URL
        session_manager = DatabaseSessionManager()
        logger.warning("URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–º—è—Ç–∏")
        
except Exception as e:
    logger.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–º—è—Ç–∏")
    # –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    user_sessions = {}

# –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
CONVERSATION_TOPICS = {
    "A1": [
        "What is your name?",
        "Where are you from?",
        "What do you like to eat?",
        "What color do you like?",
        "How old are you?"
    ],
    "A2": [
        "What is your favorite hobby?",
        "Tell me about your family.",
        "What's the weather like today?",
        "What did you do yesterday?",
        "What kind of movies do you like?"
    ],
    "B1": [
        "What are your plans for the weekend?",
        "Tell me about an interesting experience you had.",
        "What kind of music do you enjoy listening to?",
        "If you could travel anywhere, where would you go?",
        "What do you think about social media?"
    ],
    "B2": [
        "What are some environmental issues that concern you?",
        "How has technology changed the way we live?",
        "What are the advantages and disadvantages of working from home?",
        "Do you think artificial intelligence will change our future?",
        "What cultural differences have you noticed between countries?"
    ],
    "C1": [
        "How do you think education systems could be improved?",
        "What ethical considerations should be made when developing new technologies?",
        "How does media influence public opinion?",
        "What societal changes do you think will happen in the next decade?",
        "What are your thoughts on the work-life balance in modern society?"
    ],
    "C2": [
        "What philosophical questions do you find most intriguing?",
        "How do economic policies influence social inequality?",
        "In what ways might quantum computing revolutionize our approach to complex problems?",
        "How does language shape our perception of reality?",
        "What insights can literature offer us about human nature?"
    ]
}

# –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º —è–∑—ã–∫—É (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
SAMPLE_RESPONSES = {
    "greeting": [
        "Hello! How are you today?",
        "Hi there! What would you like to talk about?",
        "Welcome! What's on your mind?"
    ],
    "follow_up": [
        "That's interesting! Can you tell me more?",
        "I see. How does that make you feel?",
        "Interesting perspective. Why do you think that is?"
    ],
    "language_correction": [
        "I noticed you said '{}'. A more natural way to express that would be '{}'.",
        "That's good! Just a small suggestion: instead of '{}', you could say '{}'.",
        "You expressed that well! For even more fluency, you could try saying '{}' instead of '{}'."
    ],
    "encouragement": [
        "You're expressing yourself very well!",
        "Your English is improving nicely!",
        "I'm impressed with how you structured that thought!"
    ]
}

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenRouter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ AI
openrouter_client = OpenRouterClient()

# –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
CORRECTION_PATTERNS = {
    "i am agree": "I agree",
    "i am interesting in": "I am interested in",
    "i went in": "I went to",
    "persons": "people",
    "informations": "information",
    "advices": "advice",
    "i am working since": "I have been working since",
    "yesterday i go": "yesterday I went",
    "i didn't went": "I didn't go",
    "i am here since": "I have been here since"
}

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_name = message.from_user.first_name
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    start_button = types.KeyboardButton('/start')
    discussion_button = types.KeyboardButton('/discussion')
    stop_button = types.KeyboardButton('/stop_discussion')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    markup.add(start_button)
    markup.add(discussion_button, stop_button)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    username = message.from_user.username if hasattr(message.from_user, 'username') else None
    user_id = message.from_user.id
    is_admin = username in ADMIN_USERS and user_id == ADMIN_USERS.get(username, 0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_admin or user_id == FORCE_ADMIN_ID:
        admin_button = types.KeyboardButton('/admin_feedback')
        markup.add(admin_button)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"Hello {user_name}! üëã\n\n"
    welcome_text += "I'm Language Mirror, an AI assistant that helps you learn English through topics "
    welcome_text += "that genuinely interest you ‚Äì your thoughts, experiences, and feelings.\n\n"
    welcome_text += "üîπ Bot Features:\n\n"
    welcome_text += "‚Ä¢ Conversation Practice - chat with me on any topic to improve your English\n"
    welcome_text += "‚Ä¢ Level Adaptation - I adjust to your language proficiency (from A1 to C2)\n"
    welcome_text += "‚Ä¢ Error Correction - I gently correct your mistakes to help you improve\n"
    welcome_text += "‚Ä¢ Personalized Topics - I suggest discussion topics based on your level\n"
    welcome_text += "‚Ä¢ Article Recommendations - I can suggest reading materials on topics you're interested in\n"
    welcome_text += "‚Ä¢ Feedback System - provide feedback after conversations to help improve the bot\n\n"
    welcome_text += "üîπ Main Commands:\n\n"
    welcome_text += "‚Ä¢ /start - show this welcome message\n"
    welcome_text += "‚Ä¢ /discussion - start an English conversation or get article recommendations (1 request per day)\n"
    welcome_text += "‚Ä¢ /stop_discussion - end the current conversation\n\n"
    welcome_text += "Use the buttons below or type a command to get started!"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    try:
        from models import db, User
        from main import app
        
        with app.app_context():
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_record = User.query.filter_by(telegram_id=message.from_user.id).first()
            
            if not user_record:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                user_record = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                db.session.add(user_record)
                db.session.commit()
                logger.info(f"New user registered: {message.from_user.id} ({message.from_user.username})")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                user_record.last_activity = datetime.utcnow()
                db.session.commit()
    except Exception as e:
        logger.error(f"Error updating user in database: {e}")

@bot.message_handler(commands=['discussion'])
def handle_discussion(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /discussion."""
    user_id = message.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if 'session_manager' in globals():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        session = session_manager.get_session(user_id)
        if session:
            bot.send_message(
                message.chat.id,
                "You're already in a discussion with me. You can continue talking or "
                "use /stop_discussion to end our current conversation."
            )
            return
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
        if user_id in user_sessions:
            bot.send_message(
                message.chat.id,
                "You're already in a discussion with me. You can continue talking or "
                "use /stop_discussion to end our current conversation."
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
    from datetime import date
    today = date.today()
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from models import db, User
    from main import app
    user_record = None
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
    with app.app_context():
        user_record = User.query.filter_by(telegram_id=user_id).first()
        
        if not user_record:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
            user_record = User(
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            db.session.add(user_record)
            db.session.commit()
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            pass
        elif user_record.last_discussion_date == today:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            username = message.from_user.username if hasattr(message.from_user, 'username') else None
            is_admin = (username in ADMIN_USERS and user_id == ADMIN_USERS.get(username, 0)) or user_id == FORCE_ADMIN_ID
            
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            if is_admin:
                logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username} (ID: {user_id}) –ø–æ–ª—É—á–∏–ª –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                pass
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            elif not user_record.feedback_bonus_used:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–æ–Ω—É—Å-–∑–∞–ø—Ä–æ—Å –∑–∞ —Ñ–∏–¥–±–µ–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–ª
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üëç Get Bonus Request", callback_data="feedback_bonus"),
                    types.InlineKeyboardButton("‚ùå No Thanks", callback_data="feedback_skip")
                )
                
                bot.send_message(
                    message.chat.id,
                    "You've already used your article recommendation today!\n\n"
                    "Would you like to get a bonus request by providing feedback about our bot?",
                    reply_markup=markup
                )
                return
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏ –±–æ–Ω—É—Å
                bot.send_message(
                    message.chat.id,
                    "You've already used your article recommendation today! Come back tomorrow for more inspiring content."
                )
                return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –ª–∏–±–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –ª–∏–±–æ –æ–Ω –Ω–æ–≤—ã–π
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if user_record:
            user_record.last_discussion_date = today
            user_record.discussions_count = (user_record.discussions_count or 0) + 1
            db.session.commit()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞
    markup = types.InlineKeyboardMarkup()
    for level, description in LANGUAGE_LEVELS.items():
        markup.add(types.InlineKeyboardButton(
            f"{level} - {description}", 
            callback_data=f"level_{level}"
        ))
    
    bot.send_message(
        message.chat.id,
        "Before we begin, I'd like to know your English proficiency level "
        "so I can adapt to your needs. Please select your level:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('level_'))
def handle_language_level(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data
    level = call.data.split('_')[1]
    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = {
        "language_level": level,
        "username": call.from_user.username,
        "first_name": call.from_user.first_name,
        "last_name": call.from_user.last_name,
        "mode": "articles" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'session_manager' in globals():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ë–î
        session_manager.create_session(user_id, user_info)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
        user_sessions[user_id] = {
            "language_level": level,
            "messages": [],
            "last_active": time.time(),
            "mode": "articles"
        }
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"Great! I'll adapt to your {level} level.\n\nNow tell me ‚Äî what topic is on your mind today? What would you like to explore?"
    )

@bot.message_handler(commands=['stop_discussion'])
def handle_stop_discussion(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stop_discussion."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    session_exists = False
    
    if 'session_manager' in globals():
        session = session_manager.get_session(user_id)
        if session:
            session_exists = True
    elif user_id in user_sessions:
        session_exists = True
    
    if not session_exists:
        bot.send_message(
            message.chat.id,
            "You don't have an active discussion session. "
            "Use /discussion to start one."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton("üëç Helpful", callback_data="feedback_helpful"),
        types.InlineKeyboardButton("ü§î Okay", callback_data="feedback_okay"),
        types.InlineKeyboardButton("üëé Not helpful", callback_data="feedback_not_helpful")
    )
    
    bot.send_message(
        message.chat.id,
        "Thank you for our conversation! I hope it was helpful for your English learning journey.\n\n"
        "How would you rate our discussion?",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "feedback_bonus" or call.data == "feedback_skip")
def handle_feedback_bonus(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–µ–π –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."""
    user_id = call.from_user.id
    
    if call.data == "feedback_skip":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –±–æ–Ω—É—Å–∞
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="No problem! Come back tomorrow for your next article recommendation."
        )
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from models import db, User
    from main import app
    user_record = None
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flask
    with app.app_context():
        user_record = User.query.filter_by(telegram_id=user_id).first()
        
        if user_record and not user_record.feedback_bonus_used:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞
            user_record.feedback_bonus_used = True
            db.session.commit()
            
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞, –≤—ã–Ω–æ—Å–∏–º —ç—Ç–æ –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if user_record:
        markup = types.InlineKeyboardMarkup()
        for level, description in LANGUAGE_LEVELS.items():
            markup.add(types.InlineKeyboardButton(
                f"{level} - {description}", 
                callback_data=f"level_{level}"
            ))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="Thanks for providing feedback! You've received a bonus request for articles today.\n\n"
            "Before we begin, I'd like to know your English proficiency level so I can adapt to your needs. Please select your level:",
            reply_markup=markup
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="Sorry, there was an error processing your request. Please try again later."
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('feedback_') and not (call.data == "feedback_bonus" or call.data == "feedback_skip"))
def handle_feedback(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = call.from_user.id
    feedback_type = call.data.split('_')[1]
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    rating_map = {
        "helpful": "üëç Helpful",
        "okay": "ü§î Okay",
        "not_helpful": "üëé Not helpful"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –ª–æ–≥
    logger.info(f"User {user_id} gave feedback: {rating_map.get(feedback_type)}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"Thank you for your feedback: {rating_map.get(feedback_type)}!\n\n"
        "Would you like to add any comments about our conversation? "
        "Please reply to this message with your comments or type /skip to finish."
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if 'session_manager' in globals():
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ feedback
        session = session_manager.get_session(user_id)
        if session:
            session_manager.end_session(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        session_manager.create_session(user_id, {"feedback_type": feedback_type})
    else:
        # –í telebot –Ω–µ—Ç user_data –∫–∞–∫ –≤ python-telegram-bot, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–∏
        if user_id in user_sessions:
            user_sessions[user_id]["feedback_type"] = feedback_type
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ feedback_type)
            user_sessions[user_id] = {
                "feedback_type": feedback_type,
                "last_active": time.time()
            }
        else:
            user_sessions[user_id] = {
                "feedback_type": feedback_type,
                "last_active": time.time()
            }
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    bot.register_next_step_handler(call.message, handle_feedback_comment)

def handle_feedback_comment(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    user_id = message.from_user.id
    comment = message.text
    
    if comment.lower() == "/skip":
        bot.send_message(
            message.chat.id,
            "Thanks again for your feedback! Use /discussion anytime you want to practice English."
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        if 'session_manager' in globals():
            session_manager.end_session(user_id)
        elif user_id in user_sessions:
            del user_sessions[user_id]
            
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    feedback_type = "unknown"
    
    if 'session_manager' in globals():
        session = session_manager.get_session(user_id)
        if session and "feedback_type" in session:
            feedback_type = session["feedback_type"]
    elif user_id in user_sessions and "feedback_type" in user_sessions[user_id]:
        feedback_type = user_sessions[user_id]["feedback_type"]
    
    rating_map = {
        "helpful": "üëç Helpful",
        "okay": "ü§î Okay",
        "not_helpful": "üëé Not helpful",
        "unknown": "Rating not provided"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –ë–î
        feedback_data = {
            "user_id": user_id,
            "username": message.from_user.username or f"user_{user_id}",
            "rating": feedback_type,
            "comment": comment
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests.post –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        threading.Thread(
            target=lambda: requests.post("http://localhost:5000/api/feedback", json=feedback_data),
            daemon=True
        ).start()
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î —á–µ—Ä–µ–∑ SQLAlchemy
        from models import db, User, Feedback
        from main import app
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        def save_to_db():
            with app.app_context():
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
                user = User.query.filter_by(telegram_id=user_id).first()
                
                if user:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                    new_feedback = Feedback(
                        user_id=user.id,
                        rating=feedback_type,
                        comment=comment
                    )
                    db.session.add(new_feedback)
                    db.session.commit()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–∏–Ω–∏–º—É–º 3 —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
                    words = comment.split()
                    if len(words) >= 3:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –±–æ–Ω—É—Å
                        user.feedback_bonus_used = False  # –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                        db.session.commit()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
                        bot.send_message(
                            user.telegram_id,
                            "üéÅ Thank you for your detailed feedback! You've received a bonus article request. "
                            "Use /discussion to use it anytime today!"
                        )
                    else:
                        bot.send_message(
                            user.telegram_id,
                            "Thank you for your feedback! For more detailed comments (at least 3 words) "
                            "you can receive bonus article requests in the future."
                        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=save_to_db, daemon=True).start()
    except Exception as e:
        logger.error(f"Error saving feedback to database: {e}")
    
    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ª–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    logger.info(f"User {user_id} feedback {rating_map.get(feedback_type)} with comment: {comment}")
    
    bot.send_message(
        message.chat.id,
        "Thank you for your comments! Your feedback helps me improve.\n\n"
        "Feel free to use /discussion anytime you want to practice English again."
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if 'session_manager' in globals():
        session_manager.end_session(user_id)
    elif user_id in user_sessions:
        del user_sessions[user_id]

def find_articles_by_topic(topic: str, language_level: str) -> list:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenRouter API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.
    
    Args:
        topic: –¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
        language_level: –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (A1-C2)
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—å—è—Ö (title, url)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenRouter API
        if 'openrouter_client' in globals() and openrouter_client is not None:
            system_message = f"""You are a helpful assistant that finds relevant English articles for language learners. 
The user's English level is {language_level}. Generate 3 specific, diverse, and credible article recommendations about the topic.
Respond with exactly 3 articles, no more, no less.
Format your response as a JSON array with "title" and "url" for each article. Generate real URLs to existing English articles.
Each article should be from a different source. Focus on educational, news, or blog articles that would be interesting and appropriate 
for an English learner at the {language_level} level."""

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
            response = openrouter_client.get_completion(
                system_message=system_message,
                messages=[
                    {"role": "user", "content": f"Please recommend 3 good articles about '{topic}' for me to read and improve my English."}
                ]
            )
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
            try:
                # –í–Ω–∞—á–∞–ª–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                articles_data = json.loads(response)
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
                import re
                json_match = re.search(r'\[.*\]', response, re.DOTALL)
                if json_match:
                    try:
                        articles_data = json.loads(json_match.group(0))
                    except:
                        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
                        return default_articles_for_topic(topic)
                else:
                    return default_articles_for_topic(topic)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞
            if isinstance(articles_data, list) and len(articles_data) > 0:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å —Ä–æ–≤–Ω–æ 3 —Å—Ç–∞—Ç—å–∏
                articles = articles_data[:3]
                if len(articles) < 3:
                    # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 3
                    default = default_articles_for_topic(topic)
                    articles.extend(default[len(articles):])
                return articles
            else:
                return default_articles_for_topic(topic)
                
        else:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            return default_articles_for_topic(topic)
            
    except Exception as e:
        logger.error(f"Error finding articles: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return default_articles_for_topic(topic)

def default_articles_for_topic(topic: str) -> list:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API.
    
    Args:
        topic: –¢–µ–º–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—å—è—Ö
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–º—É –¥–ª—è URL
    topic_slug = topic.lower().replace(' ', '-')
    
    return [
        {
            "title": f"Understanding {topic}: A Comprehensive Guide",
            "url": f"https://en.wikipedia.org/wiki/{topic_slug}"
        },
        {
            "title": f"The Complete Introduction to {topic}",
            "url": f"https://www.britannica.com/search?query={topic_slug}"
        },
        {
            "title": f"5 Ways to Master {topic} Quickly",
            "url": f"https://www.bbc.com/news/topics/{topic_slug}"
        }
    ]

def generate_learning_response(user_message: str, language_level: str, conversation_history=None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —è–∑—ã–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–≤–Ω—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenRouter API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º.
    –í —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å —à–∞–±–ª–æ–Ω–∞–º–∏.
    
    Args:
        user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language_level: –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º (A1-C2)
        conversation_history: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    Returns:
        –û—Ç–≤–µ—Ç —Å –æ–±—É—á–∞—é—â–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    """
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenRouter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    try:
        # –ï–¥–∏–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
        system_message = """You are a friendly, thoughtful AI language coach. You talk to the user in short, natural, supportive messages. You avoid sounding robotic or overly academic. Your job is to guide the user through meaningful, real conversations in English while helping them learn new vocabulary and expressions in context.

When the user says something, respond with:
‚Äì a short, thoughtful reply;
‚Äì if needed, explain 1‚Äì2 useful words or phrases (briefly, like a real person would do);
‚Äì if appropriate, ask a follow-up question to keep the conversation flowing;
‚Äì do NOT give long essays or summaries;
‚Äì do NOT include links unless explicitly asked;
‚Äì do NOT talk like a tutor. You're a peer who speaks great English and helps naturally;
‚Äì be casual, warm, and clear ‚Äî not scripted.

How to explain words (Word Card Format):
When you explain or introduce a new word, use this format:
- Part of speech
- Definition
- Example (in the same context as the user's)
- Synonyms with: preposition + something/somebody + part of speech + connotation
- Antonyms with: preposition + something/somebody + part of speech + connotation
- Common collocations
- Connotation (semantic or emotional weight)

If a phrase sounds unnatural, explain why and offer real alternatives in this format:

----------------
Sounds off?

[original user sentence]
‚Üí [explanation why it sounds unnatural]
Instead:
‚Ä¢ [natural option 1]
‚Ä¢ [natural option 2]
Also avoid:
‚Ä¢ [incorrect option]
Instead:
‚Ä¢ [correct option with explanation]
----------------

Important guidelines:
‚Ä¢ Never give words without context - always explain usage, grammar, prepositions, and situations
‚Ä¢ Never say "this sounds fine" if something sounds unnatural - explain why it sounds strange, even if grammatically correct
‚Ä¢ Never use artificial examples - your phrases should sound like a native speaker wrote them for a real situation
‚Ä¢ Help the user express themselves, even if they write in a mix of their language and English

Your goal is to help the user grow their English by expressing real thoughts and emotions ‚Äî not just learning textbook phrases. Think like a language mirror ‚Äî reflecting the user's ideas in better English.

Adapt your style to the user's level ({}) if they specify it.""".format(language_level)
        
        # –°–ª–æ–≤–∞—Ä—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        system_messages = {
            "A1": system_message,
            "A2": system_message,
            "B1": system_message,
            "B2": system_message,
            "C1": system_message,
            "C2": system_message
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º B1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        system_message = system_messages.get(language_level, system_messages["B1"])
        
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if not conversation_history:
            messages = [{"role": "user", "content": user_message}]
        else:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
            messages = conversation_history[-10:]
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if messages and messages[-1]["role"] != "user":
                messages.append({"role": "user", "content": user_message})
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter
        response = openrouter_client.get_completion(system_message, messages)
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º
        if not response or response.strip() == "":
            raise Exception("Empty response from OpenRouter")
            
        return response
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"Error using OpenRouter API: {e}. Falling back to template mode.")
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã
        correction = None
        for pattern, correction_text in CORRECTION_PATTERNS.items():
            if pattern.lower() in user_message.lower():
                correction = (pattern, correction_text)
                break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        response_parts.append(random.choice(SAMPLE_RESPONSES["follow_up"]))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–æ–≤—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
        if correction and language_level not in ["C1", "C2"]:  # –ú–µ–Ω—å—à–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            response_parts.append(
                random.choice(SAMPLE_RESPONSES["language_correction"]).format(
                    correction[0], correction[1]
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–Ω–∏–µ
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–Ω–∏–µ
            response_parts.append(random.choice(SAMPLE_RESPONSES["encouragement"]))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è —É—Ä–æ–≤–Ω–µ–π A1-B1
        if language_level in ["A1", "A2", "B1"] and random.random() < 0.4:
            topics = CONVERSATION_TOPICS.get(language_level, [])
            if topics:
                response_parts.append(f"By the way, {random.choice(topics)}")
        
        return " ".join(response_parts)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return
    
    user_id = message.from_user.id
    user_message = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    session_exists = False
    language_level = "B1"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    session_mode = "conversation"  # –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±—ã—á–Ω–∞—è –±–µ—Å–µ–¥–∞
    
    if 'session_manager' in globals():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π —Å –ë–î
        session = session_manager.get_session(user_id)
        if session and "language_level" in session:
            session_exists = True
            language_level = session.get("language_level", "B1")
            session_mode = session.get("mode", "conversation")
    elif user_id in user_sessions and "language_level" in user_sessions[user_id]:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
        session_exists = True
        language_level = user_sessions[user_id].get("language_level", "B1")
        session_mode = user_sessions[user_id].get("mode", "conversation")
    
    if not session_exists:
        bot.send_message(
            message.chat.id,
            "Please use /discussion to start a conversation with me first."
        )
        return
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º "–ø–µ—á–∞—Ç–∞–Ω–∏–µ" –±–æ—Ç–∞
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
    if 'session_manager' in globals():
        session_manager.add_message_to_session(user_id, "user", user_message)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
        if "messages" not in user_sessions[user_id]:
            user_sessions[user_id]["messages"] = []
        user_sessions[user_id]["messages"].append({"role": "user", "content": user_message})
        user_sessions[user_id]["last_active"] = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–µ—Å—Å–∏–∏
    if session_mode == "articles":
        # –†–µ–∂–∏–º —Å—Ç–∞—Ç–µ–π - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
        topic = user_message
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ
        articles = find_articles_by_topic(topic, language_level)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
        articles_text = f"Here are some great pieces to reflect on your topic ‚Äì \"{topic}\":\n\n"
        for i, article in enumerate(articles, 1):
            articles_text += f"{i}. [{article['title']}]({article['url']})\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        markup = types.InlineKeyboardMarkup(row_width=3)
        markup.add(
            types.InlineKeyboardButton("üëç Useful", callback_data="feedback_helpful"),
            types.InlineKeyboardButton("ü§î Okay", callback_data="feedback_okay"),
            types.InlineKeyboardButton("üëé Not really", callback_data="feedback_not_helpful")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—å—è–º–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –±–µ—Å–µ–¥—É
        bot.send_message(message.chat.id, articles_text, parse_mode="Markdown")
        bot.send_message(
            message.chat.id,
            "Hope that gave you something to think about! Want to explore another topic? Just type /discussion.\n\nHow was that for you?",
            reply_markup=markup
        )
        
        # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        if 'session_manager' in globals():
            session_manager.end_session(user_id)
        else:
            if user_id in user_sessions:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                user_sessions[user_id] = {
                    "last_active": time.time(),
                    "waiting_for_feedback": True
                }
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        conversation_history = []
        if 'session_manager' in globals():
            conversation_history = session_manager.get_messages(user_id)
        elif user_id in user_sessions and "messages" in user_sessions[user_id]:
            conversation_history = user_sessions[user_id]["messages"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏–∏
        response = generate_learning_response(user_message, language_level, conversation_history)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
        if 'session_manager' in globals():
            session_manager.add_message_to_session(user_id, "assistant", response)
        else:
            user_sessions[user_id]["messages"].append({"role": "assistant", "content": response})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, response)

# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º /help –Ω–∞ /start –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@bot.message_handler(commands=['help'])
def handle_help(message):
    """–ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –Ω–∞ /start."""
    handle_start(message)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@bot.message_handler(commands=['admin_feedback'])
def handle_admin_feedback(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin_feedback.
    –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    –ø—Ä—è–º–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    user_id = message.from_user.id
    username = message.from_user.username if hasattr(message.from_user, 'username') else None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin = False
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    if user_id == FORCE_ADMIN_ID:
        is_admin = True
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É ID: {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    elif username and username in ADMIN_USERS:
        is_admin = True
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ –∏–º–µ–Ω–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    elif user_id and ADMIN_USERS and user_id in ADMIN_USERS.values():
        is_admin = True
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ ID –∏–∑ —Å–ø–∏—Å–∫–∞: {user_id}")
    
    # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: username={username}, id={user_id}, result={is_admin}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if DEBUG_MODE:
        bot.send_message(
            message.chat.id, 
            f"üîç –û—Ç–ª–∞–¥–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\nusername={username}\nid={user_id}\nresult={is_admin}"
        )
    
    # –û—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–µ –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if not is_admin:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    bot.send_message(message.chat.id, "üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from models import db, Feedback, User
    from main import app
    
    try:
        with app.app_context():
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
            bot.send_message(
                message.chat.id,
                "üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞–ø—Ä—è–º—É—é
            feedback_records = []
            all_feedback = Feedback.query.order_by(Feedback.timestamp.desc()).all()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            for fb in all_feedback:
                user = User.query.get(fb.user_id)
                if user:
                    feedback_records.append((
                        fb, 
                        user.telegram_id,
                        user.username,
                        user.first_name,
                        user.last_name
                    ))
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
                    feedback_records.append((
                        fb, 
                        0,
                        "unknown",
                        "Unknown",
                        "User"
                    ))
            
            if not feedback_records:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                bot.send_message(
                    message.chat.id, 
                    "üìù –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n\n"
                    "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∞—Ç –¥–∏–∞–ª–æ–≥–∏ "
                    "—Å –±–æ—Ç–æ–º –∏ –æ—Å—Ç–∞–≤—è—Ç —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞ add_test_feedback.py."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            rating_counts = {"helpful": 0, "okay": 0, "not_helpful": 0}
            
            for record, _, _, _, _ in feedback_records:
                if record.rating in rating_counts:
                    rating_counts[record.rating] += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            report = "üìä *–û—Ç—á–µ—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏*\n\n"
            report += f"üëç –ü–æ–ª–µ–∑–Ω–æ: {rating_counts['helpful']}\n"
            report += f"ü§î –ù–æ—Ä–º–∞–ª—å–Ω–æ: {rating_counts['okay']}\n"
            report += f"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ: {rating_counts['not_helpful']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            report += "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:*\n"
            comment_count = 0
            
            for record, telegram_id, username, first_name, last_name in feedback_records:
                if record.comment:
                    comment_count += 1
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    user_display = username or first_name or f"User {telegram_id}"
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —ç–º–æ–¥–∑–∏
                    rating_emoji = {
                        "helpful": "üëç",
                        "okay": "ü§î",
                        "not_helpful": "üëé"
                    }.get(record.rating, "‚ùì")
                    
                    # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
                    date_str = record.timestamp.strftime("%d.%m.%Y")
                    
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                    comment = record.comment.replace("*", "\\*").replace("_", "\\_").replace("`", "\\`")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    report += f"{comment_count}. {rating_emoji} *{user_display}* ({date_str}):\n"
                    report += f"\"_{comment}_\"\n\n"
                    
                    if comment_count >= 5:
                        break
            
            if comment_count == 0:
                report += "_–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç._"
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            total_feedback = sum(rating_counts.values())
            report += f"\n*–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:* {total_feedback}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            bot.send_message(
                message.chat.id, 
                report,
                parse_mode="Markdown"
            )
            
            # –°–æ–æ–±—â–∞–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞
            bot.send_message(
                message.chat.id,
                "üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel-–æ—Ç—á–µ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏..."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-–æ—Ç—á–µ—Ç
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
                from excel_report import create_simple_feedback_excel
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
                excel_path = create_simple_feedback_excel(feedback_records)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(excel_path, 'rb') as excel_file:
                    bot.send_document(
                        message.chat.id,
                        excel_file,
                        caption="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ Excel"
                    )
                
                logger.info(f"Excel-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {excel_path}")
                
            except Exception as excel_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-–æ—Ç—á–µ—Ç–∞: {excel_error}")
                import traceback
                logger.error(traceback.format_exc())
                
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel-–æ—Ç—á–µ—Ç: {str(excel_error)}"
                )
                
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
            bot.send_message(
                message.chat.id,
                "‚úÖ –û—Ç—á—ë—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"
            )
            
    except Exception as e:
        bot.send_message(
            message.chat.id, 
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )
        logger.error(f"Error in admin_feedback: {e}")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("Starting Language Mirror bot...")
    print("Bot is running! Press Ctrl+C to stop.")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_sessions –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    global user_sessions, session_manager
    if 'session_manager' not in globals() and 'user_sessions' not in globals():
        logger.warning("No session manager available, initializing empty user_sessions")
        user_sessions = {}
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    try:
        bot.remove_webhook()
        logger.info("Webhook removed successfully")
    except Exception as e:
        logger.error(f"Error removing webhook: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    import time
    time.sleep(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å polling –≤ non-threaded —Ä–µ–∂–∏–º–µ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        logger.error(f"Error in polling: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    main()