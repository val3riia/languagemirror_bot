#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
"""

import os
import sys
from unittest.mock import Mock, patch
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_articles_feedback_completion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫ —Å—Ç–∞—Ç—å—è–º"""
    
    # –ú–æ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    with patch('language_mirror_telebot.bot') as mock_bot, \
         patch('language_mirror_telebot.session_manager') as mock_session_manager:
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –ø–∞—Ç—á–∏–Ω–≥–∞
        from language_mirror_telebot import handle_feedback_comment
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_message = Mock()
        mock_message.from_user.id = 12345
        mock_message.text = "This was very helpful, thank you!"
        mock_message.chat.id = 12345
        
        mock_session = {"feedback_type": "helpful", "language_level": "B2"}
        mock_session_manager.get_session.return_value = mock_session
        mock_session_manager.end_session = Mock()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        try:
            handle_feedback_comment(mock_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            mock_session_manager.end_session.assert_called_once_with(12345)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            mock_bot.send_message.assert_called()
            sent_message = mock_bot.send_message.call_args[0][1]
            
            assert "Ready for more?" in sent_message
            assert "/articles" in sent_message
            assert "/discussion" in sent_message
            
            logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ç–µ–π –ü–†–û–®–ï–õ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ç–µ–π –ü–†–û–í–ê–õ–ï–ù: {e}")
            return False

def test_discussion_feedback_completion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫ –¥–∏—Å–∫—É—Å—Å–∏—è–º"""
    
    with patch('language_mirror_telebot.bot') as mock_bot, \
         patch('language_mirror_telebot.session_manager') as mock_session_manager:
        
        from language_mirror_telebot import handle_discussion_feedback_comment
        
        mock_message = Mock()
        mock_message.from_user.id = 12345
        mock_message.text = "Great conversation!"
        mock_message.chat.id = 12345
        
        mock_session = {"feedback_type": "helpful", "language_level": "C1"}
        mock_session_manager.get_session.return_value = mock_session
        mock_session_manager.end_session = Mock()
        
        try:
            handle_discussion_feedback_comment(mock_message)
            
            mock_session_manager.end_session.assert_called_once_with(12345)
            
            mock_bot.send_message.assert_called()
            sent_message = mock_bot.send_message.call_args[0][1]
            
            assert "Ready for more?" in sent_message
            assert "/articles" in sent_message
            assert "/discussion" in sent_message
            
            logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–∏—Å–∫—É—Å—Å–∏–π –ü–†–û–®–ï–õ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–∏—Å–∫—É—Å—Å–∏–π –ü–†–û–í–ê–õ–ï–ù: {e}")
            return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ ===")
    
    tests_passed = 0
    total_tests = 2
    
    if test_articles_feedback_completion():
        tests_passed += 1
    
    if test_discussion_feedback_completion():
        tests_passed += 1
    
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if tests_passed == total_tests:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
    
    return tests_passed == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)