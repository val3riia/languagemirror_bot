#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
"""

import os
import pandas as pd
import logging
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple, Union
from io import BytesIO
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

def create_feedback_excel(feedback_data: List[Dict[str, Any]], filename: Optional[str] = None) -> Tuple[Union[BytesIO, str], str]:
    """
    –°–æ–∑–¥–∞–µ—Ç Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
    
    Args:
        feedback_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        filename: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Tuple: (BytesIO –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∏–º—è —Ñ–∞–π–ª–∞)
    """
    # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"feedback_report_{timestamp}.xlsx"
    
    # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è pandas DataFrame
    data = []
    for item in feedback_data:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ø–æ–Ω—è—Ç–Ω—É—é —Ñ–æ—Ä–º—É
        rating_display = {
            "helpful": "–ü–æ–ª–µ–∑–Ω–æ üëç",
            "okay": "–ù–æ—Ä–º–∞–ª—å–Ω–æ ü§î",
            "not_helpful": "–ù–µ –ø–æ–ª–µ–∑–Ω–æ üëé"
        }.get(item.get("rating", ""), item.get("rating", ""))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        timestamp = item.get("timestamp")
        date_str = timestamp.strftime("%d.%m.%Y %H:%M") if timestamp else ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫
        data.append({
            "ID": item.get("id", ""),
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": item.get("username", ""),
            "Telegram ID": item.get("user_id", ""),
            "–û—Ü–µ–Ω–∫–∞": rating_display,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": item.get("comment", ""),
            "–î–∞—Ç–∞": date_str
        })
    
    # –°–æ–∑–¥–∞–µ–º DataFrame 
    try:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        if not data:
            columns = ["ID", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "Telegram ID", "–û—Ü–µ–Ω–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–î–∞—Ç–∞"]
            df = pd.DataFrame(columns=columns)
        else:
            df = pd.DataFrame(data)
        
        # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
        excel_bytes = BytesIO()
        
        # –°–æ–∑–¥–∞–µ–º writer —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        with pd.ExcelWriter(excel_bytes, engine='xlsxwriter') as writer:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ Excel
            df.to_excel(writer, sheet_name='–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', index=False)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            worksheet = writer.sheets['–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å']
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            for i, col in enumerate(df.columns):
                # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ
                max_len = max(
                    df[col].astype(str).map(len).max() if len(df) > 0 else 0,  # –ú–∞–∫—Å –¥–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    len(col)  # –î–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                ) + 2  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–±—Ü–∞
                worksheet.set_column(i, i, max_len)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            header_format = writer.book.add_format({
                'bold': True,
                'text_wrap': True,
                'valign': 'top',
                'bg_color': '#D9EAD3',  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
                'border': 1
            })
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
            for col_num, value in enumerate(df.columns.values):
                worksheet.write(0, col_num, value, header_format)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ BytesIO
        excel_bytes.seek(0)
        
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as temp_file:
            temp_file.write(excel_bytes.getvalue())
            temp_path = temp_file.name
        
        logger.info(f"Excel –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –≤ –ø–∞–º—è—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ: {temp_path}")
        return temp_path, filename
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-–æ—Ç—á–µ—Ç–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        raise
        
def create_simple_feedback_excel(feedback_records, filename: Optional[str] = None) -> str:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel –∏–∑ –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        feedback_records: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (feedback, telegram_id, username, first_name, last_name)
        filename: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É Excel
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    feedback_data = []
    
    for record, telegram_id, username, first_name, last_name in feedback_records:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_display = username or first_name or f"User {telegram_id}"
        
        feedback_data.append({
            "id": record.id,
            "rating": record.rating,
            "comment": record.comment,
            "timestamp": record.timestamp,
            "user_id": telegram_id,
            "username": user_display,
            "first_name": first_name,
            "last_name": last_name
        })
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel
    temp_path, _ = create_feedback_excel(feedback_data, filename)
    return temp_path