#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ Telegram –≤ workflow Replit.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ,
—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ —Å–±–æ–µ–≤.
"""

import os
import sys
import time
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    try:
        logger.info("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è language_mirror_telebot...")
        import language_mirror_telebot
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ main() —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞...")
        language_mirror_telebot.main()
        
        logger.info("–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(traceback.format_exc())
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("=" * 70)
    print("–ó–∞–ø—É—Å–∫ Language Mirror Bot –≤ —Ä–µ–∂–∏–º–µ workflow")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TELEGRAM_TOKEN")
    if not token:
        logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Replit")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Å–±–æ—è—Ö
    retry_count = 0
    max_retries = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    
    while True:
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ #{retry_count + 1})...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            success = run_bot()
            
            if not success:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                retry_count += 1
                
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤, –¥–µ–ª–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É
                if retry_count > max_retries:
                    logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}). –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞.")
                    print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–∞—É–∑–∞ 300 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞
                    retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                else:
                    # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏
                    backoff = min(60, 5 * (2 ** retry_count))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                    logger.info(f"–ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π: {backoff} —Å–µ–∫—É–Ω–¥")
                    print(f"‚è±Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π: {backoff} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(backoff)
            else:
                # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                time.sleep(5)
                retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–æ–≤
        
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            break
        
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
            logger.error(traceback.format_exc())
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            retry_count += 1
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            backoff = min(60, 5 * (2 ** retry_count))
            print(f"‚è±Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π: {backoff} —Å–µ–∫—É–Ω–¥...")
            time.sleep(backoff)

if __name__ == "__main__":
    main()