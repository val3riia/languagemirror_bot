#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Language Mirror Bot - A Telegram bot for interactive language learning.
This version is adapted to work with the telebot (PyTelegramBotAPI) library.
"""

import os
import sys
import time
import random
import logging
import json
import requests
import threading
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –£—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å telebot
try:
    import telebot
    from telebot import types
except ImportError:
    logger.error("telebot (PyTelegramBotAPI) library is not installed.")
    print("ERROR: telebot (PyTelegramBotAPI) library is not installed.")
    print("Please install it using: pip install pyTelegramBotAPI")
    sys.exit(1)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN environment variable is not set")
    print("ERROR: TELEGRAM_TOKEN environment variable is not set")
    print("Please set it to your Telegram bot token from BotFather")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ID)
ADMIN_USERS = {
    "your_admin_username": 0  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID
}

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
DEBUG_MODE = os.environ.get("DEBUG_MODE", "True").lower() in ("true", "1", "yes")

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# –ü—Ä–∏ –ª—é–±–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã–π ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
# –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–º–∞–Ω–¥—ã /admin_feedback
FORCE_ADMIN_ID = int(os.environ.get("ADMIN_TELEGRAM_ID", "0"))

# –£—Ä–æ–≤–Ω–∏ –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
LANGUAGE_LEVELS = {
    "A1": "Beginner - You're just starting with English",
    "A2": "Elementary - You can use simple phrases and sentences",
    "B1": "Intermediate - You can discuss familiar topics",
    "B2": "Upper Intermediate - You can interact with fluency",
    "C1": "Advanced - You can express yourself fluently and spontaneously",
    "C2": "Proficiency - You can understand virtually everything heard or read"
}

# –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_DAILY_LIMIT = 1

# –§–æ—Ä–º–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞-—à–∞–±–ª–æ–Ω–∞
try:
    from openrouter_client import OpenRouterClient
    OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
    openrouter_client = OpenRouterClient(api_key=OPENROUTER_API_KEY) if OPENROUTER_API_KEY else None
except (ImportError, Exception) as e:
    logger.error(f"Failed to initialize OpenRouter client: {e}")
    openrouter_client = None

# –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
def get_system_prompt(language_level="B1"):
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        prompt_file = "attached_assets/Pasted-System-Prompt-natural-phrasing-AI--1745557433318.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(prompt_file):
            logger.warning(f"System prompt file not found: {prompt_file}")
            return f"You are a friendly language coach for {language_level} level English. Keep responses concise and use natural conversation style."
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(prompt_file, "r", encoding="utf-8") as file:
            prompt_template = file.read()
            
        # –í—Å—Ç–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ –≤ —à–∞–±–ª–æ–Ω
        prompt = prompt_template.replace("{language_level}", language_level)
        return prompt
    except Exception as e:
        logger.error(f"Error reading system prompt file: {e}")
        return f"You are a friendly language coach for {language_level} level English. Keep responses concise and use natural conversation style."

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
user_sessions = {}

# –í—ã–±–∏—Ä–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
try:
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from db_session_manager import DatabaseSessionManager
    from flask import Flask
    from main import app
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º Flask
    session_manager = DatabaseSessionManager(app)
    logger.info("Using database session manager")
except ImportError:
    # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–º—è—Ç–∏
    from session_manager import SessionManager
    session_manager = SessionManager()
    logger.warning("Using in-memory session manager (no database)")
except Exception as e:
    # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–∏, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–º—è—Ç–∏
    logger.error(f"Error initializing database session manager: {e}")
    try:
        from session_manager import SessionManager
        session_manager = SessionManager()
        logger.warning("Using in-memory session manager due to database error")
    except ImportError:
        logger.error("Session manager not available!")
        session_manager = None

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π
def cleanup_thread():
    """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π."""
    while True:
        try:
            if hasattr(session_manager, 'clean_expired_sessions'):
                session_manager.clean_expired_sessions()
                logger.debug("Cleaned expired sessions")
        except Exception as e:
            logger.error(f"Error in cleanup thread: {e}")
        
        # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–æ–π
        time.sleep(600)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏
cleanup_thread_instance = threading.Thread(target=cleanup_thread, daemon=True)
cleanup_thread_instance.start()

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_id = message.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if session_manager:
            session_manager.create_session(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_discussion = types.KeyboardButton('üí¨ Discussion')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        markup.add(btn_discussion)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            "üëã Welcome to Language Mirror Bot!\n\n"
            "I'm here to help you practice and improve your English through natural conversations.\n\n"
            "You can:\n"
            "‚Ä¢ Start a discussion with me on any topic (/discussion)\n"
            "‚Ä¢ Tell me your interests and I'll suggest relevant articles\n"
            "‚Ä¢ Practice your language skills at your own pace\n\n"
            "Let's get started! Click the Discussion button or type /discussion to begin."
        )
        
        bot.send_message(message.chat.id, welcome_message, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"Error in handle_start: {e}")
        error_message = "Sorry, an error occurred. Please try again or contact support."
        bot.reply_to(message, error_message)

@bot.message_handler(commands=['discussion'])
def handle_discussion(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /discussion."""
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        username = message.from_user.username if hasattr(message.from_user, 'username') else None
        is_admin = (username == "your_admin_username" or user_id == ADMIN_USERS.get("your_admin_username"))
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        if not is_admin:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
            session = session_manager.get_session(user_id) if session_manager else {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω –ª–∏ –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime("%Y-%m-%d")
            session_today = session.get("last_discussion_date", "") == today
            discussions_today = session.get("discussions_today", 0) if session_today else 0
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            bonus_requests = session.get("bonus_requests", 0)
            
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω –∏ –Ω–µ—Ç –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if discussions_today >= DEFAULT_DAILY_LIMIT and bonus_requests <= 0:
                limit_message = (
                    "‚ö†Ô∏è You've reached your daily limit of discussion requests.\n\n"
                    "Each user can start 1 discussion per day. You can get bonus "
                    "discussion requests by providing feedback after your conversations!\n\n"
                    "Come back tomorrow for more learning."
                )
                bot.reply_to(message, limit_message)
                return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        for level, description in LANGUAGE_LEVELS.items():
            btn = types.InlineKeyboardButton(text=f"{level} - {description.split(' - ')[0]}", 
                                            callback_data=f"level_{level}")
            markup.add(btn)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
        level_message = (
            "üë©‚Äçüè´ Please select your English proficiency level:\n\n"
            "This helps me adapt my language to your needs."
        )
        
        bot.send_message(message.chat.id, level_message, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"Error in handle_discussion: {e}")
        error_message = "Sorry, an error occurred. Please try again or contact support."
        bot.reply_to(message, error_message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('level_'))
def handle_language_level(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data
        level = call.data.split('_')[1]
        user_id = call.from_user.id
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if session_manager:
            session = session_manager.get_session(user_id) or {}
            session["language_level"] = level
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–∏—Å–∫—É—Å—Å–∏–π
            today = datetime.now().strftime("%Y-%m-%d")
            session_today = session.get("last_discussion_date", "") == today
            discussions_today = session.get("discussions_today", 0) if session_today else 0
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            bonus_requests = session.get("bonus_requests", 0)
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if discussions_today >= DEFAULT_DAILY_LIMIT and bonus_requests > 0:
                bonus_requests -= 1
                session["bonus_requests"] = bonus_requests
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–∏—Å–∫—É—Å—Å–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                session["discussions_today"] = discussions_today + 1
                session["last_discussion_date"] = today
            
            session_manager.update_session(user_id, session)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ Language level set to {level}."
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–º—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        topic_message = (
            "üîç What topic would you like to discuss or learn about?\n\n"
            "For example:\n"
            "‚Ä¢ Travel to Spain\n"
            "‚Ä¢ Business negotiations\n"
            "‚Ä¢ Climate change\n"
            "‚Ä¢ Technology trends\n\n"
            "Just type your topic of interest!"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if session_manager:
            session = session_manager.get_session(user_id) or {}
            session["state"] = "waiting_for_topic"
            session_manager.update_session(user_id, session)
        
        bot.send_message(call.message.chat.id, topic_message)
        
    except Exception as e:
        logger.error(f"Error in handle_language_level: {e}")
        error_message = "Sorry, an error occurred. Please try again or contact support."
        bot.send_message(call.message.chat.id, error_message)

def find_articles_by_topic(topic: str, language_level: str) -> list:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenRouter API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.
    
    Args:
        topic: –¢–µ–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
        language_level: –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (A1-C2)
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—å—è—Ö (title, url)
    """
    try:
        if not openrouter_client:
            return default_articles_for_topic(topic)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
        prompt = f"""
        Generate 3 article suggestions for an English learner at {language_level} level interested in the topic: "{topic}".
        
        For each article, provide:
        1. A title that matches the topic and language level
        2. A realistic URL (can be fictional but should look realistic)
        3. A brief 1-sentence description
        
        Format your response as JSON with this exact structure:
        ```json
        [
            {{
                "title": "Article Title 1",
                "url": "https://example.com/article-1",
                "description": "Brief description of article 1."
            }},
            {{
                "title": "Article Title 2",
                "url": "https://example.com/article-2",
                "description": "Brief description of article 2."
            }},
            {{
                "title": "Article Title 3",
                "url": "https://example.com/article-3",
                "description": "Brief description of article 3."
            }}
        ]
        ```
        
        Ensure the content is appropriate for a {language_level} level English learner interested in "{topic}".
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
        response = openrouter_client.chat_completion(
            model="openai/gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=800
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–∞—Ä—Å–∏–º JSON
        content = response.get("choices", [{}])[0].get("message", {}).get("content", "")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –æ–±–µ—Ä–Ω—É—Ç –≤ –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏
        if "```json" in content:
            content = content.split("```json")[1].split("```")[0].strip()
        elif "```" in content:
            content = content.split("```")[1].split("```")[0].strip()
            
        # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
        articles = json.loads(content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        if not isinstance(articles, list) or len(articles) == 0:
            return default_articles_for_topic(topic)
            
        return articles
        
    except Exception as e:
        logger.error(f"Error finding articles by topic: {e}")
        return default_articles_for_topic(topic)

def default_articles_for_topic(topic: str) -> list:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API.
    
    Args:
        topic: –¢–µ–º–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—å—è—Ö
    """
    safe_topic = topic.replace(" ", "-").lower()
    
    return [
        {
            "title": f"Introduction to {topic.title()}",
            "url": f"https://learnenglish.example.com/{safe_topic}-introduction",
            "description": f"A beginner's guide to understanding {topic}."
        },
        {
            "title": f"{topic.title()}: Key Concepts Explained",
            "url": f"https://englishlearning.example.org/concepts/{safe_topic}",
            "description": f"Learn the essential vocabulary and concepts related to {topic}."
        },
        {
            "title": f"Practical Guide to {topic.title()}",
            "url": f"https://english-practice.example.net/guides/{safe_topic}",
            "description": f"Practice your English skills while learning about {topic}."
        }
    ]

def generate_learning_response(user_message: str, language_level: str, conversation_history=None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —è–∑—ã–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–≤–Ω—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenRouter API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º.
    –í —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å —à–∞–±–ª–æ–Ω–∞–º–∏.
    
    Args:
        user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language_level: –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º (A1-C2)
        conversation_history: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    Returns:
        –û—Ç–≤–µ—Ç —Å –æ–±—É—á–∞—é—â–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
        if not openrouter_client:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            responses = [
                f"That's an interesting point about {user_message.split()[0] if user_message else 'that'}! Can you tell me more?",
                "I understand what you're saying. How do you feel about this topic?",
                "That's a great perspective! Can you elaborate on that?",
                "I see what you mean. What aspects of this topic interest you the most?",
                "Thank you for sharing that. What else would you like to discuss about this topic?"
            ]
            return random.choice(responses)
        
        # –ì–æ—Ç–æ–≤–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞
        system_prompt = get_system_prompt(language_level)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
        if conversation_history:
            messages.extend(conversation_history)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ OpenRouter API
        response = openrouter_client.chat_completion(
            model="openai/gpt-4o-mini",
            messages=messages,
            max_tokens=600,
            temperature=0.7
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        content = response.get("choices", [{}])[0].get("message", {}).get("content", "")
        
        if not content:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            return "I'm thinking about what you said. Could you tell me more about your thoughts on this topic?"
        
        return content
        
    except Exception as e:
        logger.error(f"Error generating learning response: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
        return "I'm having trouble processing that right now. Let's try a different aspect of this topic or try again later. What else interests you about this subject?"

@bot.message_handler(func=lambda message: session_manager.get_session(message.from_user.id).get("state") == "waiting_for_topic" if session_manager and session_manager.get_session(message.from_user.id) else False)
def handle_topic_selection(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    try:
        user_id = message.from_user.id
        topic = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = session_manager.get_session(user_id) if session_manager else {}
        language_level = session.get("language_level", "B1")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if not topic:
            bot.reply_to(message, "Please enter a valid topic for discussion.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç–µ–π
        search_message = bot.send_message(
            message.chat.id, 
            "üîç Searching for relevant articles on this topic..."
        )
        
        # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–µ–º–µ
        articles = find_articles_by_topic(topic, language_level)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –∏ —Å—Ç–∞—Ç—å–∏ –≤ —Å–µ—Å—Å–∏–∏
        if session_manager:
            session["topic"] = topic
            session["articles"] = articles
            session["state"] = "in_discussion"
            session_manager.update_session(user_id, session)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞—Ç–µ–π
        articles_message = f"üìö I've found these articles about \"{topic}\" for your {language_level} level:\n\n"
        
        for i, article in enumerate(articles, 1):
            articles_message += f"{i}. [{article['title']}]({article['url']})\n"
            if 'description' in article:
                articles_message += f"   _{article['description']}_\n\n"
        
        articles_message += "\nNow let's discuss this topic! What aspects of it interest you the most?"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=search_message.message_id,
            text=articles_message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn_stop = types.KeyboardButton('‚èπÔ∏è Stop Discussion')
        markup.add(btn_stop)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
        discussion_message = (
            f"Let's talk about {topic}!\n\n"
            f"I'll adapt my language to your {language_level} level.\n"
            "You can ask questions, share your thoughts, or request explanations.\n\n"
            "When you're done, click the 'Stop Discussion' button or type /stop_discussion."
        )
        
        bot.send_message(
            message.chat.id,
            discussion_message,
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in handle_topic_selection: {e}")
        error_message = "Sorry, an error occurred while processing your topic. Please try again or select a different topic."
        bot.reply_to(message, error_message)

@bot.message_handler(commands=['stop_discussion'])
def handle_stop_discussion(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stop_discussion."""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = session_manager.get_session(user_id) if session_manager else {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏
        if not session or session.get("state") != "in_discussion":
            bot.reply_to(
                message, 
                "You don't have an active discussion. Use /discussion to start one!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        topic = session.get("topic", "the topic")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if session_manager:
            session["state"] = "waiting_for_feedback"
            session_manager.update_session(user_id, session)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        markup = types.InlineKeyboardMarkup(row_width=3)
        btn_helpful = types.InlineKeyboardButton(text="üëç Helpful", callback_data="feedback_helpful")
        btn_okay = types.InlineKeyboardButton(text="ü§î Okay", callback_data="feedback_okay")
        btn_not_helpful = types.InlineKeyboardButton(text="üëé Not Helpful", callback_data="feedback_not_helpful")
        markup.add(btn_helpful, btn_okay, btn_not_helpful)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_message = (
            f"Thanks for discussing {topic} with me! I hope it was helpful for your language learning.\n\n"
            "Could you please rate our conversation?"
        )
        
        bot.send_message(
            message.chat.id,
            feedback_message,
            reply_markup=markup
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_discussion = types.KeyboardButton('üí¨ Discussion')
        main_markup.add(btn_discussion)
        
        bot.send_message(
            message.chat.id,
            "You can start a new discussion when you're ready!",
            reply_markup=main_markup
        )
        
    except Exception as e:
        logger.error(f"Error in handle_stop_discussion: {e}")
        error_message = "Sorry, an error occurred. Please try again."
        bot.reply_to(message, error_message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('feedback_'))
def handle_feedback(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_type = call.data.split('_')[1]
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = session_manager.get_session(user_id) if session_manager else {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if not session or session.get("state") != "waiting_for_feedback":
            bot.answer_callback_query(call.id, "This feedback option is no longer available.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–µ—Å—Å–∏–∏
        if session_manager:
            session["feedback_type"] = feedback_type
            session["state"] = "waiting_for_feedback_comment"
            session_manager.update_session(user_id, session)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
        feedback_display = {
            "helpful": "üëç Helpful",
            "okay": "ü§î Okay",
            "not_helpful": "üëé Not Helpful"
        }.get(feedback_type, feedback_type)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"Thank you for your feedback: {feedback_display}"
        )
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
        comment_message = (
            "Do you have any specific comments about our conversation?\n\n"
            "Your feedback helps me improve! Please provide a few words of feedback "
            "to receive a bonus discussion request."
        )
        
        bot.send_message(call.message.chat.id, comment_message)
        
    except Exception as e:
        logger.error(f"Error in handle_feedback: {e}")
        error_message = "Sorry, an error occurred while processing your feedback."
        bot.send_message(call.message.chat.id, error_message)

@bot.message_handler(func=lambda message: session_manager.get_session(message.from_user.id).get("state") == "waiting_for_feedback_comment" if session_manager and session_manager.get_session(message.from_user.id) else False)
def handle_feedback_comment(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    try:
        user_id = message.from_user.id
        comment = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = session_manager.get_session(user_id) if session_manager else {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if not session or session.get("state") != "waiting_for_feedback_comment":
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_type = session.get("feedback_type", "helpful")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if session_manager:
            session["state"] = None
            session_manager.update_session(user_id, session)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        def save_to_db():
            try:
                from models import db, Feedback, User
                from main import app
                
                with app.app_context():
                    # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = User.query.filter_by(telegram_id=user_id).first()
                    
                    if not user:
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                        username = message.from_user.username
                        first_name = message.from_user.first_name
                        last_name = message.from_user.last_name
                        
                        user = User(
                            telegram_id=user_id,
                            username=username,
                            first_name=first_name,
                            last_name=last_name,
                            language_level=session.get("language_level", "B1"),
                            created_at=datetime.now()
                        )
                        db.session.add(user)
                        db.session.commit()
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                    feedback = Feedback(
                        user_id=user.id,
                        rating=feedback_type,
                        comment=comment,
                        timestamp=datetime.now()
                    )
                    
                    db.session.add(feedback)
                    db.session.commit()
                    
                    return True
            except Exception as e:
                logger.error(f"Error saving feedback to database: {e}")
                return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_saved = save_to_db()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –±–æ–Ω—É—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        give_bonus = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –±–æ–Ω—É—Å–∞
        if comment and len(comment.split()) >= 3:
            give_bonus = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –±–æ–Ω—É—Å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            if session_manager:
                session = session_manager.get_session(user_id) or {}
                session["bonus_requests"] = session.get("bonus_requests", 0) + 1
                session_manager.update_session(user_id, session)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if give_bonus:
            markup = types.InlineKeyboardMarkup(row_width=1)
            btn_bonus = types.InlineKeyboardButton(
                text="üìö Get Articles on a New Topic", 
                callback_data="bonus_request"
            )
            markup.add(btn_bonus)
        else:
            markup = None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
        if give_bonus:
            thanks_message = (
                "Thank you for your detailed feedback! üåü\n\n"
                "As a token of appreciation, you've received a bonus discussion request "
                "that you can use anytime.\n\n"
                "Would you like to use it now to get article recommendations on a new topic?"
            )
        else:
            thanks_message = (
                "Thank you for your feedback!\n\n"
                "To receive bonus discussion requests, please provide more detailed feedback next time "
                "(at least 3 words)."
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            message.chat.id,
            thanks_message,
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in handle_feedback_comment: {e}")
        error_message = "Sorry, an error occurred while processing your comment."
        bot.reply_to(message, error_message)

@bot.callback_query_handler(func=lambda call: call.data == "bonus_request")
def handle_feedback_bonus(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–µ–π –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É discussion
        message = call.message
        message.from_user = call.from_user
        message.text = "/discussion"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ–Ω—É—Å–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="You're using your bonus discussion request! Let's find some new articles for you.",
            reply_markup=None
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã discussion
        handle_discussion(message)
        
    except Exception as e:
        logger.error(f"Error in handle_feedback_bonus: {e}")
        error_message = "Sorry, an error occurred while processing your bonus request."
        bot.send_message(call.message.chat.id, error_message)

@bot.message_handler(func=lambda message: message.text == 'üí¨ Discussion')
def handle_discussion_button(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Discussion."""
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /discussion
    handle_discussion(message)

@bot.message_handler(func=lambda message: message.text == '‚èπÔ∏è Stop Discussion')
def handle_stop_discussion_button(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Stop Discussion."""
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_discussion
    handle_stop_discussion(message)

@bot.message_handler(commands=['help'])
def handle_help(message):
    """–ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –Ω–∞ /start."""
    handle_start(message)

@bot.message_handler(commands=['admin_feedback'])
def handle_admin_feedback(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin_feedback.
    –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    –ø—Ä—è–º–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ –≤ –≤–∏–¥–µ Excel-—Ñ–∞–π–ª–∞.
    """
    user_id = message.from_user.id
    username = message.from_user.username if hasattr(message.from_user, 'username') else None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin = False
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    if user_id == FORCE_ADMIN_ID:
        is_admin = True
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É ID: {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif username in ADMIN_USERS:
        is_admin = True
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ –∏–º–µ–Ω–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    elif user_id in ADMIN_USERS.values():
        is_admin = True
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ ID –∏–∑ —Å–ø–∏—Å–∫–∞: {user_id}")
    
    # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: username={username}, id={user_id}, result={is_admin}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    if DEBUG_MODE:
        bot.send_message(
            message.chat.id, 
            f"üîç –û—Ç–ª–∞–¥–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\nusername={username}\nid={user_id}\nresult={is_admin}"
        )
    
    # –û—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–µ –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if not is_admin:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, "üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from models import db, Feedback, User
    from main import app
    
    try:
        with app.app_context():
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
            bot.send_message(
                message.chat.id,
                "üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞–ø—Ä—è–º—É—é
            feedback_records = []
            all_feedback = Feedback.query.order_by(Feedback.timestamp.desc()).all()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            for fb in all_feedback:
                user = User.query.get(fb.user_id)
                if user:
                    feedback_records.append((
                        fb, 
                        user.telegram_id,
                        user.username,
                        user.first_name,
                        user.last_name
                    ))
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
                    feedback_records.append((
                        fb, 
                        0,
                        "unknown",
                        "Unknown",
                        "User"
                    ))
            
            if not feedback_records:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                bot.send_message(
                    message.chat.id, 
                    "üìù –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n\n"
                    "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∞—Ç –¥–∏–∞–ª–æ–≥–∏ "
                    "—Å –±–æ—Ç–æ–º –∏ –æ—Å—Ç–∞–≤—è—Ç —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã.\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞ add_test_feedback.py."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            rating_counts = {"helpful": 0, "okay": 0, "not_helpful": 0}
            
            for record, _, _, _, _ in feedback_records:
                if record.rating in rating_counts:
                    rating_counts[record.rating] += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
            report = "üìä *–û—Ç—á–µ—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏*\n\n"
            report += f"üëç –ü–æ–ª–µ–∑–Ω–æ: {rating_counts['helpful']}\n"
            report += f"ü§î –ù–æ—Ä–º–∞–ª—å–Ω–æ: {rating_counts['okay']}\n"
            report += f"üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ: {rating_counts['not_helpful']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            report += "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:*\n"
            comment_count = 0
            
            for record, telegram_id, username, first_name, last_name in feedback_records:
                if record.comment:
                    comment_count += 1
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    user_display = username or first_name or f"User {telegram_id}"
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —ç–º–æ–¥–∑–∏
                    rating_emoji = {
                        "helpful": "üëç",
                        "okay": "ü§î",
                        "not_helpful": "üëé"
                    }.get(record.rating, "‚ùì")
                    
                    # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
                    date_str = record.timestamp.strftime("%d.%m.%Y")
                    
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                    comment = record.comment.replace("*", "\\*").replace("_", "\\_").replace("`", "\\`")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    report += f"{comment_count}. {rating_emoji} *{user_display}* ({date_str}):\n"
                    report += f"\"_{comment}_\"\n\n"
                    
                    if comment_count >= 5:
                        break
            
            if comment_count == 0:
                report += "_–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç._"
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            total_feedback = sum(rating_counts.values())
            report += f"\n*–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:* {total_feedback}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            bot.send_message(
                message.chat.id, 
                report,
                parse_mode="Markdown"
            )
            
            # –°–æ–æ–±—â–∞–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞
            bot.send_message(
                message.chat.id,
                "üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel-–æ—Ç—á–µ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏..."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-–æ—Ç—á–µ—Ç
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
                from excel_report import create_simple_feedback_excel
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
                excel_path = create_simple_feedback_excel(feedback_records)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(excel_path, 'rb') as excel_file:
                    bot.send_document(
                        message.chat.id,
                        excel_file,
                        caption="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ Excel"
                    )
                
                logger.info(f"Excel-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {excel_path}")
                
            except Exception as excel_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-–æ—Ç—á–µ—Ç–∞: {excel_error}")
                import traceback
                logger.error(traceback.format_exc())
                
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel-–æ—Ç—á–µ—Ç: {str(excel_error)}"
                )
                
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
            bot.send_message(
                message.chat.id,
                "‚úÖ –û—Ç—á—ë—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"
            )
            
    except Exception as e:
        bot.send_message(
            message.chat.id, 
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_feedback: {e}")
        import traceback
        logger.error(traceback.format_exc())

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = session_manager.get_session(user_id) if session_manager else {}
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if session and session.get("state") == "in_discussion":
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language_level = session.get("language_level", "B1")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_history = []
            if session_manager:
                messages_history = session_manager.get_messages(user_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = generate_learning_response(message.text, language_level, messages_history)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            if session_manager:
                session_manager.add_message_to_session(user_id, "user", message.text)
                session_manager.add_message_to_session(user_id, "assistant", response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.reply_to(message, response)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
            bot.reply_to(
                message, 
                "To start a language practice conversation, use /discussion."
            )
        
    except Exception as e:
        logger.error(f"Error in handle_all_messages: {e}")
        error_message = "Sorry, I couldn't process your message. Please try again or use /discussion to start a new conversation."
        bot.reply_to(message, error_message)

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("Starting Language Mirror bot...")
    print("Bot is running! Press Ctrl+C to stop.")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_sessions –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    global user_sessions, session_manager
    if 'session_manager' not in globals() and 'user_sessions' not in globals():
        logger.warning("No session manager available, initializing empty user_sessions")
        user_sessions = {}
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    try:
        bot.remove_webhook()
        logger.info("Webhook removed successfully")
    except Exception as e:
        logger.error(f"Error removing webhook: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    import time
    time.sleep(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å polling –≤ non-threaded —Ä–µ–∂–∏–º–µ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        logger.error(f"Error in polling: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    main()